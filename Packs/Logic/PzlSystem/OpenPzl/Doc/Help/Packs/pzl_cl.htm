<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN">
<HTML>
<HEAD>
<META name="GENERATOR" content="PRODOC 1.0">
<TITLE>Class pzl</TITLE>
</HEAD>
<BODY bgcolor="white">
<style>/*** BASIC STYLES ***/
/*--------------------------------------*/
/*	BODY,               				*/
/*--------------------------------------*/
body{
    font-size:0.8em;
    font-family: verdana, arial, san-serif;
}
/*--------------------------------------*/
/*	Headings               				*/
/*--------------------------------------*/
h1{
     font-size: 1.4em;
     font-weight: bold;
     margin-bottom: -0.5em;
}
h2{
    font-size: 1.2em;
    font-weight: bold;
    margin-bottom: -0.3em;
}
h3{
    font-size: 1.0em;
    font-weight: bold;
    margin-bottom: -0.3em;
}
h4{
    font-size: 0.9em;
    font-weight: bold;
    margin-bottom: -0.3em;
}
h5{
    font-size: 0.8em;
    font-weight: bold;
    margin-bottom: -0.3em;
}
h6{
    font-size: 0.74em;
    font-weight: bold;
    margin-bottom: -0.5em;
}
/*--------------------------------------*/
/*	Normal Paragraphs              		*/
/*--------------------------------------*/
p.normal-indent
{
	margin-left:40px
}
p.fig
{
	text-align: center;
}
p.figname
{
	text-align: center;
	 font-weight: bold;
}
/*--------------------------------------*/
/* Lists: OL,UL, LI,                    */
/*--------------------------------------*/  
/*--------------------------------------*/
/* Definision Lists                     */
/*--------------------------------------*/

dl{

dt{
}
dt.DeffinedTerm_bold
{
  font-weight: 700;
}
dd {
}
/*--------------------------------------*/
/* Tables                               */
/*--------------------------------------*/
td
{
 font-size:0.8em;
    font-family: verdana, arial, san-serif;
}
/*--------------------------------------*/
/*	PRE, CODE			               		*/
/*--------------------------------------*/
span.code 
{
	font-size: 1em;
	font-family: monospace;
}	
/*** CUSTOM STYLES ***/
/*--------------------------------------*/
/*	VIP Code Paragraph Formatting  		*/
/*--------------------------------------*/
pre.vipsyntax
{
    font-family: verdana, arial, san-serif;
    background-color: #EAEAEA; 
   /* background-color: F0F0F0; */
    margin-left: 2em;
    margin-right: 2em;
    padding-top: 0.4em;
    padding-bottom: 0.4em;
    padding-left: 0.4em;
    padding-right: 0.4em;
}
/*------------------------------------------*/
/*	VIP Code Inline Formatting and Coloring */
/*------------------------------------------*/
span.grammar-terminal{
    font-family: verdana, arial, san-serif;
    color: #9933FF;
    font-weight: bold
}
span.grammar-nonterminal{
    font-family: verdana, arial, san-serif;
    color: #008000;
    font-style: italic
}
span.grammar-operator{
    font-family: verdana, arial, san-serif;
    font-weight: bold;
}
span.vp-keyword{
    font-family: verdana, arial, san-serif;
    font-weight: bold;
    color: #808000
}
span.vp-minorkeyword{
    font-family: verdana, arial, san-serif;
    color: #000080
}
span.vp-variable
{
	font-family: verdana, arial, san-serif;
	color: #008000;
}
span.vp-literal
{
	font-family: verdana, arial, san-serif;
    color: #ff00ff
}
span.vp-comment
{
	font-family: verdana, arial, san-serif;
    color: #008080
}
.navbar {
	font-family: Arial;
	color: white;
	background-color: black;
	text-align: left;
}
A.navbar {
	font-family: Arial;
	color: white;
	background-color: black;
}
TD.htree-current {
	font-weight: bold;
	color: black;
	background-color: #C0C000;
	text-align: center;
	vertical-align: middle;
}
A.htree-current {
	font-weight: bold;
	color: black;
	background-color: #C0C000;
}
TD.htree-derived {
	color : black;
	background-color: aqua;
	text-align: center;
	vertical-align: middle;
}
A.htree-derived {
	color: black;
	background-color: aqua;
}
TD.derived-from {
	color: black;
	background-color: #FFFFC0;
}
TD.derived-what {
	color: black;
	background-color: #FFFFE0;
}
P.descendant-head {
	font-weight: bold;
}
P.descendant-list {
	font-style:italic;
}
TD.sect-head {
	color: white;
	background-color: #071B63;
}
H3.sect-head {
	font-weight: bold;
	color: black;
}
TR.sect-head {
	font-weight: bold;
	color: white;
	background-color: #071B63;
}
 
</style>
<DIV>

</DIV>
<TABLE BORDER=0 width="100%">
<TBODY>
<TR>
<TD colspan=2 class="navbar"><A href="package_summary.htm" class="navbar"><B>Package</B></A>&nbsp;
<TR>
<TD width="50%" class="navbar"><B>SUMMARY:&nbsp;</B>&nbsp;<A href="#method_summary" class="navbar">Predicates</A>
<TD width="50%" class="navbar"><B>DETAIL:&nbsp;</B>&nbsp;<A href="#method_detail" class="navbar">Predicates</A>
</TBODY>
</TABLE>
<DIV>

<H2>
Class pzl
</H2>
<P>Package: <B>Packs</B>
</DIV>
<DIV>

</DIV>
<DIV>

<P class="normal">The class contains the declaration for the class pzl predicates.










 
</DIV>
<H4>
Description
</H4>
<P class="normal">This class includes class pzl declarations. The  pzl class is the only class, 
  which users can use to communicae with the Puzzle system. Every pzlContainer includes 

  this class, any class can use it. 










 

<DIV>

</DIV><HR>
<TABLE border=1 cellpadding=3 cellspacing=0 width="100%">
<TBODY>
<TR>
<TD class="sect-head" COLSPAN=2><A name="method_summary">Predicate Summary</A>
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#classinfo_undef">classInfo</A> : <A HREF="">core::classInfo</A>.<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class information  predicate. 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#getcomponentregisterfilename_0_ret">getComponentRegisterFileName</A>
 : () -> <A HREF="">pzlDomains::pzlComponentsRegisterFileName_D</A> <SPAN CLASS="vp-variable">ComponentRegisterFileName</SPAN> 
  <SPAN CLASS="vp-minorkeyword">procedure</SPAN> ().
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#getcontaineractivity_nd_2">getContainerActivity_nd</A>
 : (<A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> 
<SPAN CLASS="vp-variable">FileName</SPAN>, <A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_unsigned">unsigned</A> 
<SPAN CLASS="vp-variable">RefCounter</SPAN>)    <SPAN CLASS="vp-minorkeyword">nondeterm</SPAN> 
(o,o).
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#getcontainercontentlist_1_ret">getContainerContentList</A>
 : (<A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> 
<SPAN CLASS="vp-variable">PZLContainerFileName</SPAN>) -> <A HREF="">pzlDomains::pzlContainerContentInfo_D</A> 
<SPAN CLASS="vp-variable">ContentInfo</SPAN>   <SPAN CLASS="vp-minorkeyword">procedure</SPAN> 
(i).
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#getcontainername_0_ret">getContainerName</A> : () -> <A HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> <SPAN CLASS="vp-variable">ThisContainerName</SPAN> 
  <SPAN CLASS="vp-minorkeyword">procedure</SPAN> ().
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get the file name of the pzlContainer, in which the given class is placed 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#getcontainertobeunloaded_nd_1">getContainerToBeUnloaded_nd</A>
 : (<A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> 
<SPAN CLASS="vp-variable">FileName</SPAN>)    <SPAN CLASS="vp-minorkeyword">nondeterm</SPAN> 
(o).
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#getcontainerversion_0_ret">getContainerVersion</A> : () -> <A HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> <SPAN CLASS="vp-variable">ThisContainerVersion</SPAN> 
  <SPAN CLASS="vp-minorkeyword">procedure</SPAN> ().
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get the version of the current pzlContainer, in which the given class is placed 

<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#getlicenselevel_0_ret">getLicenseLevel</A> : () -> <A HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> <SPAN CLASS="vp-variable">PZLUserLicenseLevel</SPAN> 
  <SPAN CLASS="vp-minorkeyword">procedure</SPAN> ().
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get the license level of the given pzlContainer, in which the given class is placed 


<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#getnameandobject_nd_2">getNameAndObject_nd</A> : (<A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> 
<SPAN CLASS="vp-variable">ObjectName</SPAN>, object <SPAN CLASS="vp-variable">Object</SPAN>) 
   <SPAN CLASS="vp-minorkeyword">nondeterm</SPAN> (o,o).
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#getnamebyobject_nd_1_ret">getNameByObject_nd</A> : (object <SPAN CLASS="vp-variable">Object</SPAN>) -> <A HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> 
<SPAN CLASS="vp-variable">ObjectNameLow</SPAN>   <SPAN CLASS="vp-minorkeyword">nondeterm</SPAN> 
(i).
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#getobjectbyname_nd_1_ret">getObjectByName_nd</A> : (<A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> 
<SPAN CLASS="vp-variable">ObjectName</SPAN>) -> object <SPAN CLASS="vp-variable">Object</SPAN> 
  <SPAN CLASS="vp-minorkeyword">nondeterm</SPAN> (i).
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#newbyid_2_ret">newByID</A> : (<A CLASS="code-span" HREF="">pzlDomains::entityUID_D</A> <SPAN CLASS="vp-variable">EntityUID</SPAN>, 
object <SPAN CLASS="vp-variable">InObject</SPAN>) -> object <SPAN CLASS="vp-variable">OutObject</SPAN>.
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#newbyname_2_ret">newByName</A> : (<A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> 
<SPAN CLASS="vp-variable">Name</SPAN>, object <SPAN CLASS="vp-variable">InObject</SPAN>) 
-> object <SPAN CLASS="vp-variable">OutObject</SPAN>   <SPAN CLASS="vp-minorkeyword">procedure</SPAN> 
(i,i).
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The class constructor, which creates the new instance of the PzlComponent with the 
given name 

<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#newinstance_0">newInstance</A> : ().<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#register_2">register</A> : (<A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> 
<SPAN CLASS="vp-variable">ObjectName</SPAN>, object <SPAN CLASS="vp-variable">Object</SPAN>) 
   <SPAN CLASS="vp-minorkeyword">procedure</SPAN> (i,i).
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#registermulti_2">registerMulti</A> : (<A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> 
<SPAN CLASS="vp-variable">ObjectName</SPAN>, object <SPAN CLASS="vp-variable">Object</SPAN>) 
   <SPAN CLASS="vp-minorkeyword">procedure</SPAN> (i,i).
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#release_0">release</A> : ().<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#releaseinactivecontainers_0">releaseInactiveContainers</A>
 : ().<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#setstdoutputstream_1">setStdOutputStream</A> : (outputStream <SPAN CLASS="vp-variable">OutputStream</SPAN>).<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#subscribe_1">subscribe</A> : (<A CLASS="code-span" HREF="">notificationAgency::notificationListener</A> <SPAN 
CLASS="vp-variable">NotificationListener</SPAN>).
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#unregister_2">unRegister</A> : (<A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> 
<SPAN CLASS="vp-variable">ObjectName</SPAN>, object <SPAN CLASS="vp-variable">Object</SPAN>) 
   <SPAN CLASS="vp-minorkeyword">procedure</SPAN> (i,i).
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#unregisterall_0">unRegisterAll</A> : ()    <SPAN CLASS="vp-minorkeyword">procedure</SPAN> ().<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#unregisterbyname_1">unRegisterByName</A> : (<A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> 
<SPAN CLASS="vp-variable">ObjectName</SPAN>)    <SPAN CLASS="vp-minorkeyword">procedure</SPAN> 
(i).
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#unregisterbyobject_1">unRegisterByObject</A> : (object <SPAN CLASS="vp-variable">Object</SPAN>)    <SPAN CLASS="vp-minorkeyword">procedure</SPAN> 
(i).
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<TR bgcolor="white">
<TD class="normal">
<P><A class="code-span" href="#unsubscribe_1">unSubscribe</A> : (<A CLASS="code-span" HREF="">notificationAgency::notificationListener</A> <SPAN 
CLASS="vp-variable">NotificationListener</SPAN>).
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
</TBODY>
</TABLE><HR>
<P>
<TABLE border=1 cellpadding=3 cellspacing=0 width="100%">
<TBODY>
<TR>
<TD class="sect-head" COLSPAN=2><A name="method_detail">Predicate Details</A>
</TBODY>
</TABLE>
<DIV>

<H3>
<A name="classinfo_undef">pzl::classInfo/?</A>
</H3>
<PRE>
<P class="vipsyntax">classInfo : <A HREF="">core::classInfo</A>.</PRE>
<P class="normal">Class information  predicate. 
<H4>
Description
</H4>
<P class="normal">This predicate represents information predicate of this class. <HR>
<H3>
<A name="getcomponentregisterfilename_0_ret">pzl::getComponentRegisterFileName/0-></A>

</H3>
<PRE>
<P class="vipsyntax">getComponentRegisterFileName : ()
    -> <A HREF="">pzlDomains::pzlComponentsRegisterFileName_D</A> <SPAN CLASS="vp-variable">ComponentRegisterFileName</SPAN> 
    <SPAN CLASS="vp-minorkeyword">procedure</SPAN> ().</PRE>
<P class="normal"> <HR>
<H3>
<A name="getcontaineractivity_nd_2">pzl::getContainerActivity_nd/2</A>
</H3>
<PRE>
<P class="vipsyntax">getContainerActivity_nd : (
    <A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> <SPAN CLASS="vp-variable">FileName</SPAN>,
    <A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_unsigned">unsigned</A> <SPAN CLASS="vp-variable">RefCounter</SPAN>) 
    <SPAN CLASS="vp-minorkeyword">nondeterm</SPAN> (o,o).</PRE>
<P class="normal"> <HR>
<H3>
<A name="getcontainercontentlist_1_ret">pzl::getContainerContentList/1-></A>
</H3>
<PRE>
<P class="vipsyntax">getContainerContentList : (<A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> <SPAN CLASS="vp-variable">PZLContainerFileName</SPAN>)
    -> <A HREF="">pzlDomains::pzlContainerContentInfo_D</A> <SPAN CLASS="vp-variable">ContentInfo</SPAN> 
    <SPAN CLASS="vp-minorkeyword">procedure</SPAN> (i).</PRE>
<P class="normal"> <HR>
<H3>
<A name="getcontainername_0_ret">pzl::getContainerName/0-></A>
</H3>
<PRE>
<P class="vipsyntax">getContainerName : ()
    -> <A HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> <SPAN CLASS="vp-variable">ThisContainerName</SPAN> 
    <SPAN CLASS="vp-minorkeyword">procedure</SPAN> ().</PRE>
<P class="normal">get the file name of the pzlContainer, in which the given class is placed 
<H4>
Description
</H4>
<P class="normal">Returnes the name (full path) of the file, where the given pzlComponent is placed.
<BR>

  example:<BR>

   ...<BR>

   ContainerName=pzl:getContainerName(),<BR>

   stdIO::writef("The component "MyComponent" placed in the Container %",ContainerName),
<BR>

   ... 
<H4>
Exceptions
</H4>
<P class="normal">No special exception generated by the PzlSystem<br>
   <HR>
<H3>
<A name="getcontainertobeunloaded_nd_1">pzl::getContainerToBeUnloaded_nd/1</A>
</H3>
<PRE>
<P class="vipsyntax">getContainerToBeUnloaded_nd : (<A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> <SPAN CLASS="vp-variable">FileName</SPAN>) 
    <SPAN CLASS="vp-minorkeyword">nondeterm</SPAN> (o).</PRE>
<P class="normal"> <HR>
<H3>
<A name="getcontainerversion_0_ret">pzl::getContainerVersion/0-></A>
</H3>
<PRE>
<P class="vipsyntax">getContainerVersion : ()
    -> <A HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> <SPAN CLASS="vp-variable">ThisContainerVersion</SPAN> 
    <SPAN CLASS="vp-minorkeyword">procedure</SPAN> ().</PRE>
<P class="normal">get the version of the current pzlContainer, in which the given class is placed 

<H4>
Description
</H4>
<P class="normal">Returnes the version of the pzlContainer, where the given pzlComponent is placed.
<BR>

  The version of the pzlContainer is of string type and is defined by the constant 
"pzlContainerVersion_C" in the file iPzlConfig.i  
  of the pzlContainer's Project
<BR>

  example:<BR>

   the file iPzlCongig.i of the given pzlContainer contains the declaration of the 
constant
<BR>

    constants<BR>

    pzlContainerVersion_C="1.0;001".<BR>

  the code below can obtain the version of the current pzlContainer<BR>

   ContainerVersion=pzl::getContainerVersion(),<BR>

   stdIO::writef("The version of the Container is  %",ContainerVersion),<BR>

   ... 
<H4>
Exceptions
</H4>
<P class="normal">No special exception generated by the PzlSystem<br>
   <HR>
<H3>
<A name="getlicenselevel_0_ret">pzl::getLicenseLevel/0-></A>
</H3>
<PRE>
<P class="vipsyntax">getLicenseLevel : ()
    -> <A HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> <SPAN CLASS="vp-variable">PZLUserLicenseLevel</SPAN> 
    <SPAN CLASS="vp-minorkeyword">procedure</SPAN> ().</PRE>
<P class="normal">get the license level of the given pzlContainer, in which the given class is placed 


<H4>
Description
</H4>
<P class="normal">Returnes the license level of the pzlContainer, where the given pzlComponent is placed.
<BR>

  The License Level is defined by the company, which produces the pzlContainer<BR>

  and may have one of the following string values<BR>

  "Public"<BR>

  "Commercial"<BR>

  "Exclusive"<BR>

  "SuperExclusive"<BR>

  "Unknown"<BR>

   if the current pzlContainer is the application, then the LicenseLevel returns 
the License 
   level of the PzlPort  

  example:
<BR>

  the code below can obtain the license level of the current pzlContainer<BR>

   ...<BR>

   LicenseLevel=pzl:getLicenseLevel(),<BR>

   stdIO::writef("The License Level of the current pzlContainer is  %",LicenseLevel),
<BR>

   ... 
<H4>
Exceptions
</H4>
<P class="normal">No special exception generated by the PzlSystem<br>
   <HR>
<H3>
<A name="getnameandobject_nd_2">pzl::getNameAndObject_nd/2</A>
</H3>
<PRE>
<P class="vipsyntax">getNameAndObject_nd : (
    <A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> <SPAN CLASS="vp-variable">ObjectName</SPAN>,
    object <SPAN CLASS="vp-variable">Object</SPAN>) 
    <SPAN CLASS="vp-minorkeyword">nondeterm</SPAN> (o,o).</PRE>
<P class="normal"> <HR>
<H3>
<A name="getnamebyobject_nd_1_ret">pzl::getNameByObject_nd/1-></A>
</H3>
<PRE>
<P class="vipsyntax">getNameByObject_nd : (object <SPAN CLASS="vp-variable">Object</SPAN>)
    -> <A HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> <SPAN CLASS="vp-variable">ObjectNameLow</SPAN> 
    <SPAN CLASS="vp-minorkeyword">nondeterm</SPAN> (i).</PRE>
<P class="normal"> <HR>
<H3>
<A name="getobjectbyname_nd_1_ret">pzl::getObjectByName_nd/1-></A>
</H3>
<PRE>
<P class="vipsyntax">getObjectByName_nd : (<A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> <SPAN CLASS="vp-variable">ObjectName</SPAN>)
    -> object <SPAN CLASS="vp-variable">Object</SPAN> 
    <SPAN CLASS="vp-minorkeyword">nondeterm</SPAN> (i).</PRE>
<P class="normal"> <HR>
<H3>
<A name="newbyid_2_ret">pzl::newByID/2-></A>
</H3>
<PRE>
<P class="vipsyntax">newByID : (
    <A CLASS="code-span" HREF="">pzlDomains::entityUID_D</A> <SPAN CLASS="vp-variable">EntityUID</SPAN>,
    object <SPAN CLASS="vp-variable">InObject</SPAN>)
    -> object <SPAN CLASS="vp-variable">OutObject</SPAN>.</PRE>
<P class="normal"> <HR>
<H3>
<A name="newbyname_2_ret">pzl::newByName/2-></A>
</H3>
<PRE>
<P class="vipsyntax">newByName : (
    <A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> <SPAN CLASS="vp-variable">Name</SPAN>,
    object <SPAN CLASS="vp-variable">InObject</SPAN>)
    -> object <SPAN CLASS="vp-variable">OutObject</SPAN> 
    <SPAN CLASS="vp-minorkeyword">procedure</SPAN> (i,i).</PRE>
<P class="normal">The class constructor, which creates the new instance of the PzlComponent with the 
given name 

<H4>
Description
</H4>
<P class="normal">Creates the new instance of the pzlComponent with the name Name. 
  The pzlComponent with the name Name must be registered in one of  
  the registration domains - in the Windows Registry or in the local registration 
file *.pzr. 
  The InObject may be the object pointer of any class instance. And the pzlComponent 
must 
  know the domain of this Object, if the conversion in the pzlComponent is to be 
performed.
<BR>

<BR>

  The returned object OutObject is the pointer to the requested object. To invoke 
the  
  predicate of the named pzlComponent the OutObject must be converted to the domain 
of 
  this class, for example:
<BR>

   ...<BR>

   Object=newByName("MyComponent",This),<BR>

   MyComponentInstance=tryConvert(iMyComponent,Object),<BR>

   MyComponentInstance:myPredicate(...),<BR>

   ... 
<H4>
Exceptions
</H4>
<P class="normal">The exception is rized if the pzlSystem can not perform the constructor by reasons:<br>
 
- the PzlSystem has no access to the registry store.<br>
 - the pzlComponent with the given name is not found in the registry Store.<br>
 
- the pzlContainer, which contains the given pzlComponent can not be loaded<br>
 
- the lodaded pzlContainer doesn't contain the given pzlComponent<br>
 - the constructor of the given pzlComponent can not create the instance<br>
 The last exception desription contains the text: <br>
 'New2. newByName failured for the Component 'Name' '<br>
   
<HR>
<H3>
<A name="newinstance_0">pzl::newInstance/0</A>
</H3>
<PRE>
<P class="vipsyntax">newInstance : ().</PRE>
<P class="normal"> <HR>
<H3>
<A name="register_2">pzl::register/2</A>
</H3>
<PRE>
<P class="vipsyntax">register : (
    <A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> <SPAN CLASS="vp-variable">ObjectName</SPAN>,
    object <SPAN CLASS="vp-variable">Object</SPAN>) 
    <SPAN CLASS="vp-minorkeyword">procedure</SPAN> (i,i).</PRE>
<P class="normal"> <HR>
<H3>
<A name="registermulti_2">pzl::registerMulti/2</A>
</H3>
<PRE>
<P class="vipsyntax">registerMulti : (
    <A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> <SPAN CLASS="vp-variable">ObjectName</SPAN>,
    object <SPAN CLASS="vp-variable">Object</SPAN>) 
    <SPAN CLASS="vp-minorkeyword">procedure</SPAN> (i,i).</PRE>
<P class="normal"> <HR>
<H3>
<A name="release_0">pzl::release/0</A>
</H3>
<PRE>
<P class="vipsyntax">release : ().</PRE>
<P class="normal"> <HR>
<H3>
<A name="releaseinactivecontainers_0">pzl::releaseInactiveContainers/0</A>
</H3>
<PRE>
<P class="vipsyntax">releaseInactiveContainers : ().</PRE>
<P class="normal"> <HR>
<H3>
<A name="setstdoutputstream_1">pzl::setStdOutputStream/1</A>
</H3>
<PRE>
<P class="vipsyntax">setStdOutputStream : (outputStream <SPAN CLASS="vp-variable">OutputStream</SPAN>).</PRE>
<P class="normal"> <HR>
<H3>
<A name="subscribe_1">pzl::subscribe/1</A>
</H3>
<PRE>
<P class="vipsyntax">subscribe : (<A CLASS="code-span" HREF="">notificationAgency::notificationListener</A> <SPAN CLASS="vp-variable">NotificationListener</SPAN>).</PRE>
<P class="normal"> <HR>
<H3>
<A name="unregister_2">pzl::unRegister/2</A>
</H3>
<PRE>
<P class="vipsyntax">unRegister : (
    <A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> <SPAN CLASS="vp-variable">ObjectName</SPAN>,
    object <SPAN CLASS="vp-variable">Object</SPAN>) 
    <SPAN CLASS="vp-minorkeyword">procedure</SPAN> (i,i).</PRE>
<P class="normal"> <HR>
<H3>
<A name="unregisterall_0">pzl::unRegisterAll/0</A>
</H3>
<PRE>
<P class="vipsyntax">unRegisterAll : () 
    <SPAN CLASS="vp-minorkeyword">procedure</SPAN> ().</PRE>
<P class="normal"> <HR>
<H3>
<A name="unregisterbyname_1">pzl::unRegisterByName/1</A>
</H3>
<PRE>
<P class="vipsyntax">unRegisterByName : (<A CLASS="code-span" HREF="/Language/BuiltIn/cBuiltIn.htm#dom_string">string</A> <SPAN CLASS="vp-variable">ObjectName</SPAN>) 
    <SPAN CLASS="vp-minorkeyword">procedure</SPAN> (i).</PRE>
<P class="normal"> <HR>
<H3>
<A name="unregisterbyobject_1">pzl::unRegisterByObject/1</A>
</H3>
<PRE>
<P class="vipsyntax">unRegisterByObject : (object <SPAN CLASS="vp-variable">Object</SPAN>) 
    <SPAN CLASS="vp-minorkeyword">procedure</SPAN> (i).</PRE>
<P class="normal"> <HR>
<H3>
<A name="unsubscribe_1">pzl::unSubscribe/1</A>
</H3>
<PRE>
<P class="vipsyntax">unSubscribe : (<A CLASS="code-span" HREF="">notificationAgency::notificationListener</A> <SPAN CLASS="vp-variable">NotificationListener</SPAN>).</PRE>
<P class="normal"> 
</DIV>
</BODY>
</HTML>